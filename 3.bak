#lang plai

(print-only-errors)

#|
<FunDef> ::= {deffun {<id> <id>} <F1WAE>}
<F1WAE> ::= <num>
         | {+ <F1WAE> <F1WAE>}
         | {- <F1WAE> <F1WAE>}
         | {with {<id> <F1WAE>} <F1WAE>}
         | <id>
         | {<id> <F1WAE>}
|#
(define-type F1WAE
    [num (n number?)]
    [add (l F1WAE?) (r F1WAE?)]
    [sub (l F1WAE?) (r F1WAE?)]
    [with (name symbol?)
            (named-expr F1WAE?)
            (body F1WAE?)]
    [id (name symbol?)]
    [app (fun-name symbol?)
        (arg-expr F1WAE?)]
)

(define-type FunDef 
    [deffun (fun-name symbol?) (param-name symbol?) (f1wae F1WAE?)]
)

;; parser : sexp -> WAE?
(define (parse exp)
      (match exp
            [(list '+ l r) (add (parse l) (parse r))]
            [(list '- l r) (sub (parse l) (parse r))]
            [(? number?) (num exp)]
            [(? symbol?) (id exp)]
            [(list 'with args-list body)]
      )
)

(test (parse `{+ 3 {- x y}})
      (add (num 3) (sub (id `x) (id `y)))
)

;; interp : WAE? -> number?
(define (interp an-wae)
  (type-case F1WAE an-wae
    [num (n) n]
    [add (l r) (+ (interp l) (interp r))]
    [sub (l r) (- (interp l) (interp r))]
    [with (name named-expr body)
          (interp (subst body name (interp named-expr)))]
    [id (name) (error 'interp "free identifier: ~a" name)]
    [app (fun-name arg-expr) "?"]))

;; subst : WAE? symbol? number? -> WAE?
(define (subst expr name value)
  (type-case F1WAE expr
    [num (n) expr]
    [add (l r) (add (subst l name value)
                    (subst r name value))]
    [sub (l r) (sub (subst l name value)
                    (subst r name value))]
    [with (name2 named-expr body)
          (with name2
                (subst named-expr name value)
                (if (equal? name2 name) ; shadowing!
                    body
                    (subst body name value)))]
    [id (name2) (if (equal? name2 name)
                    (num value)
                    expr)]
    [app (fun-name arg-expr) "?"]
                    ))

;; 5
(test (interp (num 5))
      5)

;; {+ 1 2}
(test (interp (add (num 1) (num 2)))
      3)

;; {- 3 2}
(test (interp (sub (num 3) (num 2)))
      1)

;; {+ 1 {- 3 2}}
(test (interp (add (num 1) (sub (num 3) (num 2))))
      2)

#|
{with {x {+ 1 2}}
      {+ x x}}
|#
(test (interp (with 'x (add (num 1) (num 2))
                    (add (id 'x) (id 'x))))
      6)

#|
x
|#
(test/exn (interp (id 'x))
          "free identifier")

#|
{+ {with {x {+ 1 2}}
         {+ x x}}
   {with {x {- 4 3}}
         {+ x x}}}}
|#
(test (interp (add (with 'x (add (num 1) (num 2))
                         (add (id 'x) (id 'x)))
                   (with 'x (sub (num 4) (num 3))
                         (add (id 'x) (id 'x)))))
      8)

#|
{+ {with {x {+ 1 2}}
         {+ x x}}
   {with {y {- 4 3}}
         {+ y y}}}}
|#
(test (interp (add (with 'x (add (num 1) (num 2))
                         (add (id 'x) (id 'x)))
                   (with 'y (sub (num 4) (num 3))
                         (add (id 'y) (id 'y)))))
      8)

#|
{with {x {+ 1 2}}
      {with {x {- 4 3}}
            {+ x x}}}
|#
(test (interp (with 'x (add (num 1) (num 2))
                    (with 'x (sub (num 4) (num 3))
                          (add (id 'x) (id 'x)))))
      2)

#|
{with {x {+ 1 2}}
      {with {y {- 4 3}}
            {+ x x}}}
|#
(test (interp (with 'x (add (num 1) (num 2))
                    (with 'y (sub (num 4) (num 3))
                          (add (id 'x) (id 'x)))))
      6)

#|
substitute 10 for x in {+ 1 x}
|#
(test (subst (add (num 1) (id 'x))
             'x
             10)
      (add (num 1) (num 10)))

#|
substitute 10 for x in y
|#
(test (subst (id 'y) 'x 10)
      (id 'y))

#|
substitute 10 for x in {- x 1}
|#
(test (subst (sub (id 'x) (num 1))
             'x 10)
      (sub (num 10) (num 1)))

#|
substitute 10 for x in {with {y 17} x}
|#
(test (subst (with 'y (num 17) (id 'x))
             'x 10)
      (with 'y (num 17) (num 10)))

#|
substitute 10 for x in {with {y x} y}
|#
(test (subst (with 'y (id 'x) (id 'y))
             'x 10)
      (with 'y (num 10) (id 'y)))

#|
substitute 10 for x in {with {x y} x}
|#
(test (subst (with 'x (id 'y) (id 'x))
             'x 10)
      (with 'x (id 'y) (id 'x)))

#|
substitute 10 for x in 
  {with {x {+ x 1}}
    x}}
|#
(test (subst (with 'x (add (id 'x) (num 1)) (id 'x))
             'x 10)
      (with 'x (add (num 10) (num 1)) (id 'x)))

